{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "directdebits.paypoint.com",
  "basePath": "/api/v3",
  "consumes": [
    "x-www-form-urlencoded"
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "securityDefinitions": {
    "apiKey": {
      "type": "apiKey",
      "name": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "info": {
    "title": "PayPoint Direct Debit API",
    "contact": {
      "email": "helpdesk@paypoint.com"
    },
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://directdebits.paypoint.com/Images/Main.LogoPaypoint.png"
    },
    "version": "3.0.0",
    "description": "\nOur Direct Debit Collection Services are based around our Direct Debit Customer Manager application\nwhich manages the Direct Debit process from beginning to end and is connected to a\nrobust and powerful BACS submission engine. The system also provides a range of\nmanagement information via the easy to use secure web interface.\n\n## API Technical Details\n\nThe API is REST based and communication is conducted over a regular\nHTTPS connection. It accepts input in the `x-www-form-urlencoded` format\nwith output being provided in either JSON or XML format as required.\n\nThe output is selected using the `Accept` header including either\n`application/json` or `application/xml`. The API key should be also be\nspecified in the request using the `apiKey` header.\n\nOur API uses four different HTTP methods to indicate the different\noperations being undertaken on the data being manipulated. These are:\n\n|**Method**      | **Operation**\n| -------------- | --------------\n| **HTTP GET**   | Request for information from the server. The server will respond with the data requested.\n| **HTTP POST**  | Request to create a record on the server. The POST request must be accompanied by the relevant data in the body or query string as dictated by the specification below.\n| **HTTP PATCH** | Request to amend (or partially amend) the record on the server.\n| **HTTP DELETE**| A request to remove a record from the server (only available on the client return data endpoint call).\n\n### Example Headers for JSON Mode:\n\n```\nGET https://directdebits.paypoint.com/api/v3/client/LUISCT/BACS/customer/callback\n\nAccept: application/json\napiKey: xAQdXTPtZPG3QqsUJw73wx1o\nContent-Type: application/json\n```\n\n## The Direct Debit Process\n\nThroughout the development of our API we have sought to simplify the\nDirect Debit process as much as possible, however due to the technical\nnature of Direct Debits it is helpful to understand the general data\nflow and the reasons for certain time delays.\n\n1. After creating a ‘Customer’ record on our system, you will need to\nassign a ‘schedule’ to them. The schedule can take a number of forms:\n    - A schedule that can collect ad-hoc payments as and when you\n      request them via the API. There will usually be date\n      restrictions in place.\n    - A schedule where you ask us to collect regular amounts on\n      regular dates in a month, or days in a week as per your requirements.\n    - A schedule where a pre-determined amount is taken on regular\n      dates in a month, or days in a week as per your instructions.\n    - A schedule where the collection amounts and or dates are fixed.\n\n    PayPoint creates the schedules as part of the set-up process and\n    the available schedules can be listed by using the ‘schedules’ call.\n\n2. As soon as a schedule is applied to a customer record, we send an\ninstruction to BACS to create the Direct Debit instruction. The date\nfor the first payment required should be set <u>at least</u> 10 working\ndays after the schedule creation date.\n\n3. Ad-hoc payments need to be lodged onto the *Direct Debit Customer Manager*\n<u>at least</u> 5 working days before the collection date.\n\n4. Around three working days before the collection date, we submit the\npayments to BACS for collection. Payments cannot be changed after\nsubmission has occurred.\n\n5. The final status of the payment records can be enquired upon 3\nworking days following the collection date. Where a payment\ncollection date falls on a weekend or a non UK banking day, the\ncollection date is automatically moved to the next working day, and\nthe developer will need to take this into account. (e.g.: A payment\nscheduled on Saturday, 1st June 2013 will be collected on Monday\n3rd June 2013. Payment statuses will be available from Thursday\n6th June 2013.)\n\n## A Note on Working Days\n\nWe ask that our clients allow an **absolute minimum** of 10 working days\nbetween creating a customer and contract and collecting the first\npayment. Payments for existing contracts must be submitted and confirmed\nby 8pm 5 working days before the collection date for existing customers\nwith an active Direct Debit.\n\nWe <u>strongly recommend</u> that customers are created and payments uploaded\n<u>1 -2 days in advance</u> of these cut off times as these deadlines leave\n**no** contingency to problem solve any issues that arise which could\nlead to payments being missed.\n\n**It is important to note** that if a collection date falls on a weekend\nor a bank holiday, then the 10 and 5 working day rules start from the\nprevious working day; so for a Saturday or a Sunday, 5/10 working days\nshould be counted back from the previous Friday.\n\n**For example:**\n\n<u>For payments due on Saturday 15/04/2017</u>\n- Payments for existing customers would need to be submitted and\n  confirmed by 8pm on Thursday 06/04/2017.\n- New customers would need to be confirmed by 9pm on Thursday 30/03/2017.\n\n**Note:** 14/04/2017 was Good Friday, a Bank Holiday in the UK and does\nnot count as a banking day.\n\n## Using the API and UI together\n\nDirect Debit Customer Manager provides a useful User Interface (UI) available\nvia your browser which gives access to your customer data and a suite of\nreports.\n\nIf you have chosen to do a “full integration” with your own Customer\nRelationship Management or Accounting software, then it must be borne in\nmind that your software is driving the payment process entirely. In\n“full integration” mode you will be using the API to set up direct\ndebits and send ad-hoc payments as and when collections are required; in\nthis arrangement we generally advise against using the UI other than to\ndownload paid/unpaid reports.\n\nIt is important to note that when using the API in a “full integration”\nthe following anomalies will be present within the UI:\n\n- The account and arrears balances shown in the Direct Debit Customer Manager UI\n  against each customer will not reflect manual payments made in your\n  CRM/Accounts package unless they are also (double) keyed as manual\n  payments onto the Direct Debit Customer Manager UI.\n\n- At present, there is no way to automatically “represent” failed\n  payments using the API and therefore our recommendation is to add a\n  new ad-hoc payment to collect any arrears. As these are new and\n  separate transactions, these will increase the total contract\n  balance, but will not affect the arrears balance which will remain\n  unless they are manually cleared via the UI.\n\n- As a result of the above, the arrears report provided within the UI\n  will be incorrect and should not be relied upon. Arrears and\n  contracts balances should be drawn from your own software unless you\n  have keyed any manual payments and written off unpaid transactions\n  that have been represented via the UI.\n\nIf you require any further assistance with using the API and UI\ntogether, please contact the helpdesk at helpdesk@paypoint.com\n\n## Error Handling\n\nErrors are provided in JSON or XML format per the preference included\nwithin the headers. Due to the complexity of the API and the Direct\nDebit Scheme, we are unable to provide a definitive list of all the\nerrors that the system may generate, however we have attempted to make\nthe errors generated as clear as possible – i.e. Plain English. We\nsuggest that you take advantage of a test account and thoroughly test\nyour API integration via that, but also put procedures in place to catch\nnew errors that you encounter so that procedures can be but pin place to\nhandle them appropriately.\n\nTwo errors that frequently arise are:\n\n**API NOT ENABLED:**\n\n**JSON:**\n\n```json\n{\n    \"ErrorCode\": 7,\n    \"Detail\": null,\n    \"Message\": \"API not enabled\"\n}\n```\n\n**XML:**\n```xml\n<ErrorAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>API not enabled</Message>;\n    <ErrorCode>7</ErrorCode>\n</ErrorAcknowledgement>\n```\n\n**Explanation:**\n\nIn order to prevent client and API Key enumeration, this error will be\ngenerated for any of the following three reasons:\n\n- The CLIENT CODE in the URL is incorrect.\n- The API KEY quoted is incorrect.\n- The API has not been enabled by PayPoint.\n\nBefore raising a support ticket with our IT Helpdesk, please check\ncarefully that the API Key and Client Code being used are correct,\nbearing in mind that both are case-sensitive.\n\n\n**METHOD NOT SUPPORTED:**\n\n**JSON:**\n```json\n{\n    \"Message\": \"The requested resource does not support http method 'POST'.\"\n}\n```\n\n**XML:**\n```xml\n<Error>\n    <Message>The requested resource does not support http method 'POST'.</Message>\n</Error>\n```\n\n**Explanation:**\n\nThis error occurs for one of the following two reasons:\n- You are using the incorrect HTTP method\n- You are using the correct HTTP method, but have failed to include a\n  mandatory field.\n\nBefore raising a ticket with our IT Helpdesk, please check the\ndocumentation to ensure that the method you are using is supported and\nthat all mandatory parameters have been included.\n"
  },
  "parameters": {
    "clientCode": {
      "name": "clientCode",
      "description": "The client code provided in your welcome email.",
      "required": true,
      "in": "path",
      "type": "string",
      "maxLength": 6
    },
    "customerId": {
      "name": "customerId",
      "description": "The GUID of the  customer (if the customer already exists).",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "guid"
    },
    "email": {
      "name": "email",
      "description": "The customer’s contact email address.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "email?": {
      "name": "email",
      "description": "The customer’s contact email address.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "title": {
      "name": "title",
      "description": "The customer’s title (Mr/Mrs/Ms/Miss/Mx etc).",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 10
    },
    "title?": {
      "name": "title",
      "description": "The customer’s title (Mr/Mrs/Ms/Miss/Mx etc).",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 10
    },
    "dateOfBirth?": {
      "name": "dateOfBirth",
      "description": "The customer’s date of birth.\n\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "customerRef": {
      "name": "customerRef",
      "description": "A **unique** reference number allocated by the client for this customer.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "customerRef?": {
      "name": "customerRef",
      "description": "A **unique** reference number allocated by the client for this customer.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "firstName": {
      "name": "firstName",
      "description": "The customer's first name.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "firstName?": {
      "name": "firstName",
      "description": "The customer's first name.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "surname": {
      "name": "surname",
      "description": "The customer's surname.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "surname?": {
      "name": "surname",
      "description": "The customer's surname.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "companyName?": {
      "name": "companyName",
      "description": "The company name of the customer (if applicable).",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    },
    "postCode": {
      "name": "postCode",
      "description": "The customer's Post Code.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 8
    },
    "postCode?": {
      "name": "postCode",
      "description": "The customer's Post Code.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 8
    },
    "accountNumber": {
      "name": "accountNumber",
      "description": "The customer's bank account number.\nThis must be eight numerical characters with all leading zeros left intact.\n\nExamples include: `01065284`, `00000000`, `26280464`.\n\nAny non-numerical characters **must be removed** before passing the data to the API.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{8}",
      "minLength": 8,
      "maxLength": 8
    },
    "accountNumber?": {
      "name": "accountNumber",
      "description": "The customer's bank account number.\nThis must be eight numerical characters with all leading zeros left intact.\n\nExamples include: `01065284`, `00000000`, `26280464`.\n\nAny non-numerical characters **must be removed** before passing the data to the API.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{8}",
      "minLength": 8,
      "maxLength": 8
    },
    "bankSortCode": {
      "name": "bankSortCode",
      "description": "The customer's bank sort code.\nThis must be six numerical characters with all leading zeros left intact.\n\nExamples include: `089286` `100000` `600000`, `230580`.\n\nIn the United Kingdom it is sometimes customary to insert dashes/hyphens\nbetween groups of two characters (e.g. `08-92-86`, `23-05-80`). Any hyphens,\ndashes or non-numerical characters **must be removed** before being passed\nto the API.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{6}",
      "minLength": 6,
      "maxLength": 6
    },
    "bankSortCode?": {
      "name": "bankSortCode",
      "description": "The customer's bank sort code.\nThis must be six numerical characters with all leading zeros left intact.\n\nExamples include: `089286` `100000` `600000`, `230580`.\n\nIn the United Kingdom it is sometimes customary to insert dashes/hyphens\nbetween groups of two characters (e.g. `08-92-86`, `23-05-80`). Any hyphens,\ndashes or non-numerical characters **must be removed** before being passed\nto the API.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[0-9]{6}",
      "minLength": 6,
      "maxLength": 6
    },
    "accountHolderName": {
      "name": "accountHolderName",
      "description": "The name of the customer's bank account.\nThis must be a maximum of eighteen alphanumeric characters `[0-9a-zA-Z ]`.\nA space is also allowed. Any special characters or punctuation such as ampersands,\napostrophes, hyphens, slashes, backslashes, commas, full stops etc. **must be\nremoved** before passing to the API.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "pattern": "[0-9a-zA-Z ]{0, 18}",
      "maxLength": 18
    },
    "accountHolderName?": {
      "name": "accountHolderName",
      "description": "The name of the customer's bank account.\nThis must be a maximum of eighteen alphanumeric characters `[0-9a-zA-Z ]`.\nA space is also allowed. Any special characters or punctuation such as ampersands,\napostrophes, hyphens, slashes, backslashes, commas, full stops etc. **must be\nremoved** before passing to the API.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "pattern": "[0-9a-zA-Z ]{0, 18}",
      "maxLength": 18
    },
    "homePhoneNumber?": {
      "name": "homePhoneNumber",
      "description": "The customer's home telephone number.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 20
    },
    "workPhoneNumber?": {
      "name": "workPhoneNumber",
      "description": "The customer's work telephone number.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 18
    },
    "mobilePhoneNumber?": {
      "name": "mobilePhoneNumber",
      "description": "The customer's mobile telephone number.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 18
    },
    "line1": {
      "name": "line1",
      "description": "Line one of the customer's postal address.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 50
    },
    "line1?": {
      "name": "line1",
      "description": "Line one of the customer's postal address.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 50
    },
    "line2": {
      "name": "line2",
      "description": "Line two of the customer's postal address.",
      "required": true,
      "in": "query",
      "type": "string",
      "maxLength": 30
    },
    "line2?": {
      "name": "line2",
      "description": "Line two of the customer's postal address.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 30
    },
    "line3?": {
      "name": "line3",
      "description": "Line three of the customer's postal address.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 30
    },
    "line4?": {
      "name": "line4",
      "description": "Line four of the customer's postal address.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 30
    },
    "initials?": {
      "name": "initials",
      "description": "If the customer has provided any middle initials, they can be added in this field.",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 5
    },
    "nextPaymentPatchAmount?": {
      "name": "nextPaymentPatchAmount",
      "description": "If you wish to take the next payment to be a different amount (e.g.\npro rata because the number of days between payments will deb different)\nthen pass the amount using this parameter. Ensure that `patchNextPayment`\nis set to `true` if you are using this.\n",
      "in": "query",
      "type": "number",
      "multipleOf": 0.01
    },
    "patchNextPayment": {
      "name": "patchNextPayment",
      "description": "Set to `true` if using `nextPaymentPatchAmount` or `false` if not.\n",
      "in": "query",
      "required": true,
      "type": "boolean"
    },
    "monthDay": {
      "name": "monthDay",
      "description": "The new day of the month on which payments are to be taken.\n\n**NOTE:** *You may not* select days `29`, `30` or `31` of the month;\nif you wish to select the last day of the month; pass the string\n`Last day of the Month`.\n\nPayments will be collected on the next available instance of the payment\nday, which will be a **minimum** of 5 working days in the future.  Any\npayment already scheduled in the next 5 working days *will still be\ncollected*.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "enum": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "Last Day of the Month"
      ]
    },
    "paymentDayInMonth?": {
      "name": "paymentDayInMonth",
      "description": "If the contract is for regular payments, then the day on which you wish\nthe first payment should be passed with this parameter.  **NOTE:** *You\nmay not* select days 29, 30 or 31 of the month; if you wish to select the\nlast day of the month; pass the string `Last day of the Month`.\n\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\nThis field is only mandatory if the contract is **annual** or **monthly**.\n\nYou may only select days 1 to 28 or “Last day of the month”.\nChoosing 29, 30 or 31 will result in payments being skipped in\nmonths that do not contain that date.\n",
      "in": "query",
      "type": "string",
      "enum": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
        "24",
        "25",
        "26",
        "27",
        "28",
        "Last Day of the Month"
      ]
    },
    "terminationType": {
      "name": "terminationType",
      "description": "Pass the way in which the contract should end using this parameter.\nIf the contract is **ad-hoc,** *you must* pass `Until further notice`.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "enum": [
        "Take certain number of debits",
        "Until further notice",
        "End on exact date"
      ]
    },
    "numberOfDebits?": {
      "name": "numberOfDebits",
      "description": "If this is a “Take certain Number of Debits” contract then the number of\ndebits to be taken should be passed using this parameter.\n\nThis field is only mandatory if the termination type is “Take Certain\nNumber of Debits”.\n",
      "required": false,
      "in": "query",
      "type": "integer",
      "minimum": 0,
      "maximum": 999
    },
    "initialAmount?": {
      "name": "initialAmount",
      "description": "If this is a contract for regular payments **and** the first payment is\ndifferent to the regular payments, then pass the first payment amount\nwith this parameter.\n\n**Do not** pass this parameter with ad-hoc contracts, or where the first\namount is the same as the regular amount.\n",
      "required": false,
      "in": "query",
      "type": "number",
      "multipleOf": 0.01
    },
    "amount?": {
      "name": "amount",
      "description": "If the contract is for regular payments, then the regular payment\namount should be passed using this parameter. Do not pass this\nparameter if the contract is an ad-hoc contract.\n\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\n",
      "required": false,
      "in": "query",
      "type": "number",
      "multipleOf": 0.01
    },
    "finalAmount?": {
      "name": "finalAmount",
      "description": "If this is a contract for regular payments **and** the final payment is\ndifferent to the regular payments, then pass the final payment amount\nwith this parameter. **Do not** pass this parameter with ad-hoc\ncontracts, or where the final amount is the same as the regular amount.\n",
      "required": false,
      "in": "query",
      "type": "number",
      "multipleOf": 0.01
    },
    "atTheEnd": {
      "name": "atTheEnd",
      "description": "This parameter decides what will happen when the contract ends. If you have\nselected a `terminationType` of `Until Further Notice` or the contract is an\nad-hoc contract, *you must* pass `Switch to Further Notice`.\n",
      "required": true,
      "in": "query",
      "type": "string",
      "enum": [
        "Expire",
        "Switch to Further Notice"
      ]
    },
    "additionalReference?": {
      "name": "additionalReference",
      "description": "If you wish to add an additional reference to the contract for you own use,\nthis can be passed to using the `additionalReference` parameter.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "maxLength": 255
    }
  },
  "definitions": {
    "Payment": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID of the payment. We suggest that you save this so that you can easily\nchange or query the payment in future. If you are using pushed return data,\nthis will be included in any payload delivered concerning the payment.\n",
          "type": "string",
          "format": "guid"
        },
        "Status": {
          "description": "The status of the payment. This can be:\n- Paid - We have received the payment from the customer (\\*\\*see below)\n- Pending – The payment has been queued to be sent to the bank for collection.\n- Represented – The payment has been returned by the bank **unpaid**, and the\n  system has created a new transaction to try and collect the amount again.\n- Unpaid – The payment has been returned by the bank unpaid and **will not**\n  be sent again to the bank for collection.\n- Withdrawn – The payment was at the point of being sent to the bank for\n  collection, but was withdrawn by Paypoint at the last minute. The\n  payment has not been collected.\n- Indemnity Claimed – The customer has approached their bank for a refund\n  which is being/has been processed.\n\n\\*\\* BACS works by exception; that is to say that payments are assumed to be\npaid unless we hear from the bank otherwise. As such, payments remain in the\n`Pending` state up until the point they are submitted to the bank for\ncollection (3 – 4 working days before the collection date). Upon submission,\nthe payment status changes to `Paid` although the actual status of the payment\nis not known until 1-2 working days after the due date.  Because of this, we\nrecommend that you do not update your system with the payment status until \n2-3 working days after the Due Date.\n\nIt is also important to note that BACS only works on banking days (Monday to\nFriday excluding bank and public holidays). For that reason, if a payment\nDue Date is on a weekend or a public holiday, the collection will take place\non the next banking day. For example, a payment due on Saturday, 15th April\n2017 will actually collect on Tuesday 18th April 2017 (the Monday being Easter\nMonday which is a bank holiday in the UK). Again, this needs to be factored in\nto when you check the status of payments; in the above example, it would be\nprudent to wait until late in the afternoon of 20th April 2017 or better 21st\nApril 2017 to ensure that all unpaid messages have been received from the bank\nand processed.\n",
          "type": "string",
          "enum": [
            "Paid",
            "Pending",
            "Represented",
            "Unpaid",
            "Withdrawn",
            "Indemnity Claimed"
          ]
        },
        "IsCredit": {
          "description": "If the payment is a credit to the customer, this will show as `true`, else it\nwill show as `false`.\n",
          "type": "boolean"
        },
        "IsAdhoc": {
          "description": "If this is an adhoc payment, this will show as `true`, else if it is a\nscheduled payment, it will shows as `false`.\n",
          "type": "boolean"
        },
        "Amount": {
          "description": "The amount of the payment.",
          "type": "number"
        },
        "Date": {
          "description": "The due date of the payment.",
          "type": "string",
          "format": "date-time"
        },
        "ReasonCode": {
          "description": "The BACS reason code of the payment if the payment has been returned unpaid.\nThe possible reasons are:\n- 0: Refer to payer.\n- 1: Instruction cancelled.\n- 2: Payer deceased.\n- 3: Account transferred.\n- 4: Advance notice disputed.\n- 5: No account/Wrong account type.\n- 6: No instruction.\n- 7: Amount differs.\n- 8: Amount not yet due.\nFor further details on the meanings of these codes, and the associated action\nrequired, please see our separate booklet.\n",
          "type": "integer",
          "minimum": 0,
          "maximum": 8
        },
        "ReasonMessage": {
          "description": "Plain text explanation of the ReasonCode.",
          "type": "string"
        },
        "Comment": {
          "description": "The comment passed when the payment was added; a ReasonMessage\nmay be appended to the end of this.\n",
          "type": "string"
        },
        "Type": {
          "description": "The type of payment (BACS being a bank processed payment,\nManual being something manually added via the UI.\n",
          "type": "string"
        }
      }
    },
    "Customer": {
      "type": "object",
      "properties": {
        "CustomerId": {
          "description": "The GUID of the customer record.",
          "type": "string",
          "format": "guid"
        },
        "Name": {
          "description": "The customer’s name.",
          "type": "string"
        },
        "PostCode": {
          "description": "The customer’s postcode.",
          "type": "string"
        },
        "Products": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Title": {
                "description": "The “plain English” name of the schedule.",
                "type": "string"
              },
              "EndDate": {
                "description": "The end date of the schedule if of a fixed-term type. Otherwise\nthis will show “Infinite”.\n",
                "type": "string"
              },
              "ContractStatus": {
                "description": "The present status of the contract.",
                "type": "string"
              }
            }
          }
        },
        "RejectionReason": {
          "description": "The reason why the customer should be denied membership (only if\nAllow = false)\n"
        },
        "LastVisit": {
          "description": "The date and time of the last recorded visit.",
          "type": "string"
        },
        "Picture": {
          "description": "The URL of the customer’s picture (if held).",
          "type": "string"
        },
        "Allow": {
          "description": "Whether or not to allow the customer entry (true=yes, false=no).\n",
          "type": "boolean"
        },
        "CardNumber": {
          "description": "The customer’s membership card number.",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Return Endpoints",
      "description": "Return data is passed to endpoint(s) of your choice by setting the URL\nthat data should be posted to using the API. You should contact us at\nhelpdesk@paypoint.com to advise whether you require return\ninformation in XML or JSON format; the default is JSON.\n"
    },
    {
      "name": "Customer Manipulation",
      "description": "A customer record captures the personal and banking details of the\nperson or organisation that you wish to collect funds from. A customer\nrecord needs to be created before a Direct Debit (contract) record can\nbe created to collect payments. There can be multiple Direct Debits\n(contracts) attached to a customer record.\n\n**Important: You are required to perform a modulus check on bank account numbers\nand sort codes before they are passed to the API. We can offer a bank\nchecking API on a pay-per-use basis – please contact our Sales\nDepartment on `01242 650052`for further details on pricing. Failure to\nmodulus check data is likely to cause problems in processing your\npayments. **\n"
    },
    {
      "name": "Contract Querying and Creation",
      "description": "A contract record represents the Direct Debit associated with a customer\nrecord. There are two forms of contract record:\n-   **Ad-hoc:** This is where a Direct Debit is created at the bank for\n    the customer, but no payments are requested unless you specifically\n    input payments via the Payments or Bulk Payments API call.\n\n-   **Scheduled:** In this mode, a schedule for payments is stated at\n    the outset and the system will create the relevant payments in the\n    database approximately five working days before the payments become\n    due. Schedules can usually be weekly or monthly, however the\n    frequencies available will be communicated to you when the API\n    details are provided.\n\nCustomers can have multiple contracts attached to them in order that\nthey may have multiple payment streams being collected simultaneously.\n"
    },
    {
      "name": "Contract Amendment",
      "description": "Changing the payment amount or date on a scheduled contract can be\nachieved by using one of the following calls. You will need to select\nthe correct call for the type of contract that you are amending. For\nexample, changing the date on a monthly contract will need a monthly\ncall.\n\nWe have only shown the responses from one of the calls as all of the\ncalls respond in the same manner. One example of an error is shown,\nhowever you should be prepared to accept different errors and handle\nthem as exceptions during the testing stage.\n"
    },
    {
      "name": "Cancelling the Direct Debit (Does not cancel payment creation)",
      "description": "It is important to understand that there are two parts to a contract;\nthe schedule which creates payments and the Direct Debit which collects\nthose payments. By running the following call against the contract, the\nDirect Debit is cancelled which will stop the system from sending\n**scheduled** payments to the bank for collection. They will still be\ncreated within the system, however they will not be sent to the bank and\nwill contribute to customer arrears.\n\n**NOTE:** This function will **not** affect ad-hoc payments which will\nbe sent regardless of the direct debit status. To prevent ad-hoc\npayments from being sent to the bank, they must *be deleted\nindividually*.\n"
    },
    {
      "name": "Archiving a Contract",
      "description": "Archiving a contract achieves four things:\n- It cancels the direct debit.\n- Writes off any arrears that is outstanding on the contract.\n- Cancels any future scheduled payments (it does not cancel ad-hoc\n  payments).\n- Sets the contract status to “archived”.\n"
    },
    {
      "name": "Reactivating a Direct Debit",
      "description": "Reactivating a Direct Debit takes a contract that is in the cancelled\nstate and changes it to “Pending to Activate”. This sends a new\ninstruction to the bank to re-set up the direct debit. A “new 0N” charge\nwill be made for reactivating a direct debit.\n"
    },
    {
      "name": "Restart a Contract",
      "description": "Restarting a contract is fundamentally different to reactivating a\ncontract as it can only be performed if two criteria have been met:\n- The original contract was a fixed term contract which has “Expire”\n  as its “atTheEnd” parameter.\n- The payment schedule has come to a natural end **and** the contract\n  status has changed to “Expired”.\n\nThis call adds a new contract onto the end of the previous contract, in\neffect “recycling” the previous direct debit at the bank which can save\non direct debit set up charges.\n\nThis call cannot be used unless both of the two criteria above have been\nmet, otherwise unexpected results may occur.\n"
    },
    {
      "name": "Adding/Querying Payments"
    },
    {
      "name": "Bulk Adding Payments"
    },
    {
      "name": "Payment Manipulation"
    },
    {
      "name": "Obtaining Available Schedules"
    },
    {
      "name": "Door Entry",
      "description": "Door Entry is our simple to use access management system for gyms and\nmember clubs. Used in conjunction with a card reader, the system can\nenquire upon the payment status of a member and be used as part of a\ndecision making process either allowing the member access to a\nservice/area or not.\n"
    },
    {
      "name": "Return Information",
      "description": "If you have provided us with a return endpoint using the `Return\nEndpoint` call, data will be posted back to you either in XML or JSON as\nrequired. The default is JSON – if you need XML return information,\nplease let us know.\n\n### Object Change Return Information\n\n#### Example JSON Payload\n\nThis is for an ADDACS change – where a customer has cancelled their\nDirect Debit with the bank.\n\n```json\n{\n  \"NewStatus\": \"Cancelled\",\n  \"Id\": \"ac190e35-2fa7-162c-8505-18702c186a43\",\n  \"ChangeDate\": \"2017-05-09T10:20:10\",\n  \"Entity\": \"contract\",\n  \"ChangeType\": \"BACS\",\n  \"Source\": \"ADDACS\",\n  \"ReportCode\": \"1\",\n  \"ReportMessage\": \"Contract Cancelled because of ADDACS code 1 (Instruction Cancelled)\",\n  \"Comment\": \"Auto-updated by BACS file\"\n}\n```\n\n#### Example XML Payload\n\nThis is for an ARUDD change when a customer’s payment has been returned\nunpaid by the bank.\n\n```xml\n<root>\n    <NewStatus>Unpaid</NewStatus>\n    <Id>f6dc0f34-1a71-4493-a0af-2f0993f36dc5</Id>\n    <ChangeDate>2017-05-09T12:17:50</ChangeDate>\n    <Entity>payment</Entity>\n    <ChangeType>BACS</ChangeType>\n    <Source>ARUDD</Source>\n    <ReportCode>0</ReportCode>\n    <ReportMessage>The payment marked as 'Unpaid' because of ARUDD code 0 (Refer to Payer)</ReportMessage>\n    <Comment>Auto-updated by BACS file</Comment>\n</root>\n```\n\n#### Output Parameters:\n\n| **Parameter** | **Description**\n| ------------- | ---------------\n| AccountName | If the Entity type is customer, the customers name as it appears on their bank account.\n| AccountNumber | If the Entity type is customer, the customers bank account number.\n| SortCode | If the Entity type is customer, the bank sort code of the customer.\n| NewStatus | This is the new status of the object. For payments, this can be:<br>Represented<br>Pending<br>Paid<br>Unpaid<br>Withdrawn<br>Indemnity Claimed<br><br>For contracts:<br>Expired<br>Cancelled<br>Pause<br>Suspended<br>Cancellation Pending<br>Active<br>Creation Pending<br>\n| Id | The GUID of the object being reported on.\n| ChangeDate | The date/time that the change took place.\n| Entity | The entity type: either payment, contract or customer.\n| ChangeType | BACS or Manual depending on how the change came about.\n| Source | ADDACS, ARUDD, DDIC or Manual depending on the source if the change.\n| ReportCode | If the change came from a BACS report (ADDACS, ARUDD or DDIC) the reason code will appear in this field. It will be null in the case of a manual change.\n| ReportMessage | Plain text explanation of the change. We recommend this is logged at your end for reference.\n| Comment | If any comment was input by a user during a manual change, it will appear here.\n\n### Object Change Report Codes\n\nThe following is a list of all potential BACS Report codes we can send to your webhooks.\n\n| **Source** | **Entity** | **ReportCode** | **ReportMessage**\n| ---------- | ---------- | -------------- | -----------------\n| AUDDIS | Contract | 1 | Instruction Cancelled by Payer\n| AUDDIS | Contract | 2 | Payer Deceased\n| AUDDIS | Contract | 3 | Account Transferred to a new Bank or Building Society\n| AUDDIS | Contract | 5 | No Account\n| AUDDIS | \\- | 6 | No Instruction\n| AUDDIS | Contract | B | Account Closed\n| AUDDIS | Customer | C | Account Transferred to a Different Branch of Bank/Building Society\n| AUDDIS | Contract | F | Invalid Account Type\n| AUDDIS | Contract | G | Bank will not accept Direct Debits on Account\n| AUDDIS | Contract | H | Instruction has Expired\n| AUDDIS | Contract | I | Payer Reference is not Unique\n| AUDDIS | Contract | K | Instruction Cancelled by Paying Back\n| ADDACS | Contract | 0 | Instruction Cancelled - Refer to Payer\n| ADDACS | Contract | 1 | Instruction Cancelled\n| ADDACS | Contract | 2 | Payer Deceased\n| ADDACS | Customer | 3 | Account transferred to new Bank or Building Society\n| ADDACS | Contract | B | Account Closed\n| ADDACS | Customer | C | Account transferred to a different branch of Bank or Building Society\n| ADDACS | Contract | D | Advance Notice Disputed\n| ADDACS | Customer | E | Instruction Amended\n| ADDACS | Contract | R | Instruction Reinstated\n| ARUDD | Payment | 0 | Refer to Payer\n| ARUDD | Payment | 1 | Instruction Cancelled\n| ARUDD | Payment | 2 | Payer Deceased\n| ARUDD | Payment | 3 | Account Transferred\n| ARUDD | Payment | 4 | Advance Notice Disputed\n| ARUDD | Payment | 5 | No Account\n| ARUDD | Payment | 6 | No Instruction\n| ARUDD | Payment | 7 | Amount Differs\n| ARUDD | Payment | 8 | Amount Not Yet Due\n| ARUDD | Payment | 9 | Presentation Overdue\n| ARUDD | Payment | A | Service User Differs\n| ARUDD | Payment | B | Account Closed\n| DDIC | Contract | 1 | The amount and/or date of the Direct Debit differs from the Advance Notice\n| DDIC | Contract | 2 | No advance notice was received by the payer or the amount quoted is disputed by the payer\n| DDIC | Contract | 3 | DDI cancellation by the paying bank\n| DDIC | Contract | 4 | Payer has cancelled the DDI direct with the Service User\n| DDIC | Contract | 5 | Payer disputes having given authority\n| DDIC | Contract | 6 | Signature on DDI is fraudulent or not in accordance with the account authorised signature(s) held by the paying bank\n| DDIC | Contract | 7 | An indemnity claim has been raised at the Service User's request\n| DDIC | Contract | 8 | Payer does not recognise Service User collecting Direct Debit\n\n\n### New Payment Generated Notification Information\n\nThis notification is submitted to your payments webhook whenever DDCMS generates\na new payment on either a fixed or rolling regular schedule.\nThis does *NOT* send information on payments submitted on an adhoc schedule.\n\n#### Example JSON Payload\n\n```json\n\n{\n  \"CustomerId\": \"8e8880dc-d36a-500e-9757-dcdab7418f8a\",\n  \"CustomerRef\": null,\n  \"ContractId\": \"bca883a2-e939-44ff-b3f0-9823°00dd388\",\n  \"DirectDebitRef\": \"ABC-XY009999\",\n  \"DateAdded\": \"2021-02-19T11:22:26.7662254+00:00\",\n  \"DateDue\": \"2021-03-01T00:00:00\",\n  \"Amount\": 49.7,\n  \"Comments\": null,\n  \"Id\": \"59cde7d8-1a81-4da3-b04f-10e71020ed74\",\n  \"Entity\": \"payment\",\n  \"CreateType\": \"BACS\",\n  \"Source\": null,\n  \"Status\": \"Pending\"\n}\n\n```\n\n### Bulk Payment Insert Return Information\n\nThis is what the API returns from a bulk payment insert - see the *Bulk Adding\nPayments* section for more info.\n\n#### Example XML Payload\n\n```xml\n<root>\n    <Contract>07024c7a-c31c-46c1-8e0e-8fcff640b35c</Contract>\n    <Amount>15.99</Amount>\n    <DueDate>2017-06-01T00:00:00</DueDate>\n    <Id>1522c59f-87dc-4b31-9931-a6083776f670</Id>\n    <Error />\n    <Message />\n</root>\n```\n\n#### Example JSON Payload\n```json\n{\n  \"Contract\":\"07024c7a-c31c-46c1-8e0e-8fcff640b35c\",\n  \"Amount\":15.99,\n  \"DueDate\":\"2017-06-01T00:00:00\",\n  \"Id\":\"23bc8558-51cd-4c4e-b223-260010c69d38\",\n  \"Error\":null,\n  \"Message\":null\n}\n```\n\n#### Output Parameters:\n| Parameter | Description\n| --------- | -----------\n| Contract  | The Contract GUID that the payment has been added to.\n| Amount    | The amount of the payment.\n| DueDate   | The due date of the payment.\n| Id        | The payment GUID that you should keep a record of.\n| Error     | Any validation errors will appear here.\n| Message   | Any validation messages or warnings will appear here.\n"
    }
  ],
  "paths": {
    "/client/{clientCode}/BACS/{entity}/callback": {
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The client code provided in your welcome email.",
            "in": "path",
            "maxLength": 6,
            "name": "clientCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "The entity for which to receive callback BACS messages.",
            "enum": [
              "customer",
              "contract",
              "payment"
            ],
            "in": "path",
            "name": "entity",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Callback URL cleared."
              },
              "application/xml": "<GeneralAcknowledgement\n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Callback URL cleared.</Message>\n</GeneralAcknowledgement>"
            }
          }
        },
        "tags": [
          "Return Endpoints"
        ],
        "description": "Clears the set callback URL for the specified entity.",
        "summary": "Clears the set callback URL for the given return endpoint",
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \"https://directdebits.paypoint.com/api/v3/client/{clientCode}/BACS/{enitity}/callback\"\n"
          }
        ]
      },
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The client code provided in your welcome email.",
            "in": "path",
            "maxLength": 6,
            "name": "clientCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "The entity for which to receive callback BACS messages.",
            "enum": [
              "customer",
              "contract",
              "payment"
            ],
            "in": "path",
            "name": "entity",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "https://my.website.com/webhook"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><Message>https://my.website.com/webhook</Message></GeneralAcknowledgement>\n  "
            }
          },
          "401": {
            "description": "Unauthorised - API not enabled or API key incorrect",
            "examples": {
              "application/json": {
                "Message": "API not enabled"
              },
              "application/xml": "<ErrorAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><Message>API\n    not enabled</Message><ErrorCode>7</ErrorCode></ErrorAcknowledgement>"
            }
          },
          "404": {
            "description": "Not found - Client code incorrect",
            "examples": {
              "application/json": {
                "ErrorCode": 7,
                "Message": "API not enabled"
              },
              "application/xml": "<ErrorAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><Message>API\n  not enabled</Message><ErrorCode>7</ErrorCode></ErrorAcknowledgement>"
            }
          },
          "405": {
            "description": "API key not provided",
            "examples": {
              "application/json": {
                "Message": "The requested resource does not support http method 'POST'."
              },
              "application/xml": "<Error><Message>The requested resource does not support http method 'POST'.</Message></Error>"
            }
          }
        },
        "tags": [
          "Return Endpoints"
        ],
        "description": "Returns the assigned callback URL for the specified entity.",
        "summary": "Get the callback URL for the given return endpoint",
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://directdebits.paypoint.com/api/v3/client/{clientCode}/BACS/{enitity}/callback\"\n"
          }
        ]
      },
      "post": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "description": "The client code provided in your welcome email.",
            "in": "path",
            "maxLength": 6,
            "name": "clientCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "The entity for which to receive callback BACS messages.",
            "enum": [
              "customer",
              "contract",
              "payment"
            ],
            "in": "path",
            "name": "entity",
            "required": true,
            "type": "string"
          },
          {
            "description": "New value for the callback URL.",
            "format": "url",
            "in": "query",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Callback URL assigned."
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><Message>Callback\n  URL assigned.</Message></GeneralAcknowledgement>"
            }
          }
        },
        "tags": [
          "Return Endpoints"
        ],
        "description": "Sets the callback URL for the specified entity.",
        "summary": "Sets the callback URL for the given return endpoint",
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -d \"url=https://my.website.com/webhook\" https://directdebits.paypoint.com/api/v3/client/{clientCode}/BACS/{enitity}/callback\n"
          }
        ]
      }
    },
    "/client/{clientCode}/customer": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        }
      ],
      "get": {
        "summary": "Queries the database for a set of customers.",
        "description": "**NOTE:** The response from a GET method includes an `IsArchived` flag.\nOn a newly created customer, this will show as `true` which is normal.\nThe record will automatically change to `false` when an associated live\nDirect Debit (contract) is attached to it.\n",
        "parameters": [
          {
            "$ref": "#/parameters/email?"
          },
          {
            "$ref": "#/parameters/title?"
          },
          {
            "name": "from",
            "description": "The date/time from which you want to find new customers added.\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "to",
            "description": "The date/time to which you want to find new customers added.\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/dateOfBirth?"
          },
          {
            "$ref": "#/parameters/customerRef?"
          },
          {
            "$ref": "#/parameters/firstName?"
          },
          {
            "$ref": "#/parameters/surname?"
          },
          {
            "$ref": "#/parameters/companyName?"
          },
          {
            "$ref": "#/parameters/postCode?"
          },
          {
            "$ref": "#/parameters/accountNumber?"
          },
          {
            "$ref": "#/parameters/bankSortCode?"
          },
          {
            "$ref": "#/parameters/accountHolderName?"
          },
          {
            "$ref": "#/parameters/homePhoneNumber?"
          },
          {
            "$ref": "#/parameters/workPhoneNumber?"
          },
          {
            "$ref": "#/parameters/mobilePhoneNumber?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Id": "c36ce83c-0064-4c1e-a157-cd4c70decf47",
                "CustomerRef": "AE102890",
                "IsArchived": true,
                "DateAdded\"": "2017-04-12T13:22:48.800Z",
                "Title": "Mr",
                "FirstName": "Matthew",
                "Surname": "Harris",
                "CompanyName": "PayPoint",
                "Initials": null,
                "DateOfBirth": "2017-01-01T00:00:00.000Z",
                "HomePhoneNumber": "01234567890",
                "MobilePhoneNumber": null,
                "WorkPhoneNumber": null,
                "Email": "spam@paypoint.com",
                "AddressDetail": {
                  "Line1": "1 Tebbit Mews",
                  "Line2": "Winchcombe Street",
                  "Line3": "Cheltenham",
                  "Line4": null,
                  "PostCode": "A1 1AA"
                },
                "BankDetail": {
                  "AccountHolderName": "Test",
                  "AccountNumber": "01065285",
                  "BankSortCode": "309906"
                },
                "Memos": []
              },
              "application/xml": "<CustomerDetail xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Id>c36ce83c-0064-4c1e-a157-cd4c70decf47</Id>\n    <CustomerRef>AE102890</CustomerRef>\n    <IsArchived>true</IsArchived>\n    <DateAdded>2017-04-12T13:22:48.8</DateAdded>\n    <Title>Mr</Title>\n    <FirstName>Matthew</FirstName>\n    <Surname>Harris</Surname>\n    <CompanyName>Payoint</CompanyName>\n    <DateOfBirth>2017-01-01T00:00:00</DateOfBirth>\n    <HomePhoneNumber>01234567890</HomePhoneNumber>\n    <Email>spam@paypoint.com</Email>\n    <AddressDetail>\n        <Line1>1 Tebbit Mews</Line1>\n        <Line2>Winchcombe Street</Line2>\n        <Line3>Cheltenham</Line3>\n        <PostCode>A1 1AA</PostCode>\n    </AddressDetail>\n    <BankDetail>\n        <AccountHolderName>Test</AccountHolderName>\n        <AccountNumber>01065285</AccountNumber>\n        <BankSortCode>309906</BankSortCode>\n    </BankDetail>\n    <Memos />\n</CustomerDetail>\n"
            }
          }
        },
        "tags": [
          "Customer Manipulation"
        ]
      },
      "post": {
        "summary": "Creates a customer in the database.",
        "description": "### Error Handling\n\nErrors are presented back in the JSON or XML response in human readable\nform.\n\n**Common Errors:**\n\n*Error:*\n\n“There is an existing Customer with the same Client and Customer ref in\nthe database already.”\n\n*Explanation:*\n\nThe customer reference must be unique; this indicates that a customer\nwith the customerRef provided in the API call already exists\n\n*Resolution:*\n\nCheck that the customer does not already exist; if not, you must use\nanother unique customerRef.\n\n*Error:*\n\nInvalid Postcode. The postcode must have 5, 6 or 7 characters only\n\n*Explanation:*\n\nThe postcode supplied is not in a correct UK format.\n\n*Resolution:*\n\nUK postcodes can be formed in the following ways:\n- A99 9AA\n- AA99 9AA\n- AA9A 9AA\n\nWhere A is a capital letter \\[A-Z\\] and 9 is a number \\[0-9\\]. Please\nprovide the postcode in one of the recognised formats.\n",
        "parameters": [
          {
            "$ref": "#/parameters/email"
          },
          {
            "$ref": "#/parameters/title"
          },
          {
            "$ref": "#/parameters/dateOfBirth?"
          },
          {
            "$ref": "#/parameters/customerRef"
          },
          {
            "$ref": "#/parameters/firstName"
          },
          {
            "$ref": "#/parameters/surname"
          },
          {
            "$ref": "#/parameters/companyName?"
          },
          {
            "$ref": "#/parameters/postCode"
          },
          {
            "$ref": "#/parameters/accountNumber"
          },
          {
            "$ref": "#/parameters/bankSortCode"
          },
          {
            "$ref": "#/parameters/accountHolderName"
          },
          {
            "$ref": "#/parameters/homePhoneNumber?"
          },
          {
            "$ref": "#/parameters/workPhoneNumber?"
          },
          {
            "$ref": "#/parameters/mobilePhoneNumber?"
          },
          {
            "$ref": "#/parameters/line1"
          },
          {
            "$ref": "#/parameters/line2"
          },
          {
            "$ref": "#/parameters/line3?"
          },
          {
            "$ref": "#/parameters/line4?"
          },
          {
            "$ref": "#/parameters/initials?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "customerRef": {
                  "type": "string",
                  "description": "The customer reference that you passed via the API into the system.\n"
                },
                "Id": {
                  "type": "string",
                  "description": "The GUID of the customer record. You must save this to your database\nas it will be needed should you wish to update the customer record\nor create a Direct Debit (Contract).\n"
                },
                "Message": {
                  "type": "string",
                  "description": "If there are any problems with the record, these will be shown in\nthe message field.\n"
                }
              }
            },
            "examples": {
              "application/json": {
                "CustomerRef": "AE102888",
                "Id": "12f5734a-bfc3-45f2-9edd-44d4a05cf751",
                "Message": null
              },
              "application/xml": "<CustomerAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <CustomerRef>AE102889</CustomerRef>\n    <Id>a1d86a0a-6806-408b-b5ce-1fae797cc142</Id>\n</CustomerAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Customer Manipulation"
        ]
      }
    },
    "/client/{clientCode}/customer/{customerId}": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "$ref": "#/parameters/customerId"
        }
      ],
      "get": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "AddressDetail": {
                  "Line1": "1 Tebbit Mews",
                  "Line2": "Winchcombe Street",
                  "Line3": "Cheltenham",
                  "PostCode": "A1 1AA"
                },
                "BankDetail": {
                  "AccountHolderName": "PayPoint",
                  "AccountNumber": "01065285",
                  "BankSortCode": "309906"
                },
                "CompanyName": "PayPoint",
                "CustomerRef": "AE102890",
                "DateAdded\"": "2017-04-12T13:22:48.800Z",
                "DateOfBirth": "2017-01-01T00:00:00.000Z",
                "Email": "spam@paypoint.com",
                "FirstName": "Matthew",
                "HomePhoneNumber": "01234567890",
                "Id": "c36ce83c-0064-4c1e-a157-cd4c70decf47",
                "IsArchived": true,
                "Memos": [],
                "Surname": "Harris",
                "Title": "Mr"
              },
              "application/xml": "<CustomerDetail xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Id>c36ce83c-0064-4c1e-a157-cd4c70decf47</Id>\n    <CustomerRef>AE102890</CustomerRef>\n    <IsArchived>true</IsArchived>\n    <DateAdded>2017-04-12T13:22:48.8</DateAdded>\n    <Title>Mr</Title>\n    <FirstName>Matthew</FirstName>\n    <Surname>Harris</Surname>\n    <CompanyName>PayPoint</CompanyName>\n    <DateOfBirth>2017-01-01T00:00:00</DateOfBirth>\n    <HomePhoneNumber>01234567890</HomePhoneNumber>\n    <Email>spam@paypoint.com</Email>\n    <AddressDetail>\n        <Line1>1 Tebbit Mews</Line1>\n        <Line2>Winchcombe Street</Line2>\n        <Line3>Cheltenham</Line3>\n        <PostCode>A1 1AA</PostCode>\n    </AddressDetail>\n    <BankDetail>\n        <AccountHolderName>PayPoint</AccountHolderName>\n        <AccountNumber>01065285</AccountNumber>\n        <BankSortCode>309906</BankSortCode>\n    </BankDetail>\n    <Memos />\n</CustomerDetail>"
            }
          },
          "404": {
            "description": "Customer not found",
            "examples": {
              "application/json": {
                "Message": "API not enabled"
              },
              "application/xml": "<ErrorAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><Message>API\n  not enabled</Message><ErrorCode>7</ErrorCode></ErrorAcknowledgement>"
            }
          }
        },
        "tags": [
          "Customer Manipulation"
        ],
        "description": "**NOTE:** The response from a GET method includes an `IsArchived` flag.\nOn a newly created customer, this will show as `true` which is normal.\nThe record will automatically change to `false` when an associated live\nDirect Debit (contract) is attached to it.\n",
        "summary": "Queries the database for a single customer by ID."
      },
      "patch": {
        "summary": "Updates (or partially updates) an existing customer in the database.",
        "parameters": [
          {
            "$ref": "#/parameters/email"
          },
          {
            "$ref": "#/parameters/title"
          },
          {
            "$ref": "#/parameters/dateOfBirth?"
          },
          {
            "$ref": "#/parameters/firstName?"
          },
          {
            "$ref": "#/parameters/surname?"
          },
          {
            "$ref": "#/parameters/companyName?"
          },
          {
            "$ref": "#/parameters/postCode?"
          },
          {
            "$ref": "#/parameters/accountNumber?"
          },
          {
            "$ref": "#/parameters/bankSortCode?"
          },
          {
            "$ref": "#/parameters/accountHolderName?"
          },
          {
            "$ref": "#/parameters/homePhoneNumber?"
          },
          {
            "$ref": "#/parameters/workPhoneNumber?"
          },
          {
            "$ref": "#/parameters/mobilePhoneNumber?"
          },
          {
            "$ref": "#/parameters/line1?"
          },
          {
            "$ref": "#/parameters/line2?"
          },
          {
            "$ref": "#/parameters/line3?"
          },
          {
            "$ref": "#/parameters/line4?"
          },
          {
            "$ref": "#/parameters/initials?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Customer Manipulation"
        ]
      }
    },
    "/client/{clientCode}/customer/{customerId}/contract": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "$ref": "#/parameters/customerId"
        }
      ],
      "get": {
        "summary": "Queries the database for a contract or set of contracts.",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "CustomerId": "19283a22-7442-4c92-b035-8fa7f5e6a9a0",
                "Contracts": [
                  {
                    "Id": "7aa8cef6-ec95-47a7-9ced-4aa0938559ab",
                    "DirectDebitReference": "LUISCT-MT000325",
                    "ScheduleName": "DD Dates 1/15 - Fixed",
                    "Description": "Collect an initial £1.00 followed by 9 payments of\n£1.00 on 15th of the month ending on 25th April 2017\n",
                    "PaymentMonthInYear": 7,
                    "PaymentDayInMonth": "15",
                    "PaymentDayInWeek": null,
                    "Start": "2016-07-15T00:00:00",
                    "TerminationDate": null,
                    "TerminationType": "Take certain number of debits",
                    "NumberOfDebits": 10,
                    "InitialAmount": 1,
                    "ExtraInitialAmounts": "",
                    "Amount": 1,
                    "FinalAmount": null,
                    "Every": 1,
                    "IsGiftAid": true,
                    "AtTheEnd": "Expire",
                    "Status": "Active",
                    "StatusExplanation": "N/A"
                  }
                ]
              },
              "application/xml": "<ContractsResponse xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <CustomerId>19283a22-7442-4c92-b035-8fa7f5e6a9a0</CustomerId>\n    <Contracts>\n        <ContractDetail>\n            <Id>7aa8cef6-ec95-47a7-9ced-4aa0938559ab</Id>\n            <DirectDebitReference>LUISCT-MT000325</DirectDebitReference>\n            <ScheduleName>DD Dates 1/15 - Fixed</ScheduleName>\n            <Description>Collect an initial £1.00 followed by 9 payments of\n            £1.00 on 15th of the month ending on 25th April\n            2017</Description>\n            <PaymentMonthInYear>7</PaymentMonthInYear>\n            <PaymentDayInMonth>15</PaymentDayInMonth>\n            <Start>2016-07-15T00:00:00</Start>\n            <TerminationDate xsi:nil=\"true\" />\n            <TerminationType>Take certain number of\n            debits</TerminationType>\n            <NumberOfDebits>10</NumberOfDebits>\n            <InitialAmount>1.00</InitialAmount>\n            <ExtraInitialAmounts />\n            <Amount>1.00</Amount>\n            <FinalAmount xsi:nil=\"true\" />\n            <Every>1</Every>\n            <IsGiftAid>true</IsGiftAid>\n            <AtTheEnd>Expire</AtTheEnd>\n            <Status>Active</Status>\n            <StatusExplanation>N/A</StatusExplanation>\n        </ContractDetail>\n    </Contracts>\n</ContractsResponse>\n"
            }
          }
        },
        "tags": [
          "Contract Querying and Creation"
        ]
      },
      "post": {
        "summary": "Creates a contract in the database.",
        "description": "For ad-hoc contracts, you will only need to pass `scheduleName`, `start`,\n`terminationType`, `atTheEnd` and `isGiftAid`.\n\n### Contract Statuses\n\nUpon creation, a Contract Status will read “Pending to activate (0N in\nqueue to be send)” and it will remain in this state until approximately\n8-9 working days before either (a) the start date provided in the create\ncontract call when creating an ad-hoc contract call or (b) the first\npayment date in the case of scheduled/recurring payments.\n\nWhen in this state, it is inadvisable to attempt to make changes to the\ncontract or to push ad-hoc payments to the contract as payments may be\nmissed or marked unpaid without an attempt to collect being made.\n\nWe recommend waiting for the contract status to change to “Active”\n(usually 8-9 working days before collection or the start date stated in\nthe create contract call) before making changes to the contract or\npushing payments ad-hoc payments into the system.\n\nThe other contract statuses are as follows:\n\n| Status | Description\n| ------ | ---------------------------------------------\n| **Active** | The contract is active and will either be producing payments if it is a scheduled contract, or able to accept ad-hoc payments if it is an ad-hoc contract.\n| **Cancelled** | The Direct Debit has been cancelled at the bank by the customer or has been changed to “cancelled” in the UI. In the event that this is a scheduled contract, payments will continue to be created and marked as unpaid until the contract is archived or the scheduled payments come to a natural end.\n| **Expired**  | Either a fixed-term schedule of payments has come to its natural end or the contract has been ended using a patch in the UI.\n| **Suspended** | We were prevented from setting up the Direct Debit for some reason and the payments have been suspended. Refer to the UI or the contract StatusExpanation for details.\n| **Creation Pending** | The set-up process for payments is in progress.\n| **Cancellation Pending** | You are unlikely to encounter this status, however if you do, a message has been sent to the bank to end the Direct Debit and the “close-down” process is in progress.\n| **Pause** | A user has paused the set-up of the Direct Debit using the UI.\n\n### Timeframes\n\nYou should also be aware that you must allow a **minimum** of 10 clear\nworking days between setting up a contract and collecting the first\npayment and 5 clear working days between pushing a second or subsequent\nad-hoc payment and its collection date on an active contract.\n\nA working day means a banking day in the United Kingdom which is Mondays\nto Fridays and excludes public and bank holidays. A list of public and\nbank holidays can be found here: <https://www.gov.uk/bank-holidays>. \n\nWhile the above timeframes are the minimum required, we strongly\nrecommend building yourself a day or two of contingency into your\nprocesses so that you have time to rectify any problems that may be\nencountered. We are unable *under any circumstances* to accept\ninstructions for payments or new contracts after the appropriate cut off\ndates.\n",
        "parameters": [
          {
            "name": "scheduleName",
            "description": "The name of the schedule to be used when creating a contract.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "start",
            "description": "The start date of the contract. This **must** be at least 10 **working**\ndays in the future, on a permitted date and not after the anticipated\nfirst payment date. If this is a regular schedule, use the same date as\nthe first payment date.\n\nOnly up to 364 days in advance.\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "required": true,
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/numberOfDebits?"
          },
          {
            "name": "every",
            "description": "If the contract is set to take regular payments, this parameter allows you\nto skip periods (e.g. every 2 months, every 4 weeks etc).\n\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\n",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "isGiftAid",
            "description": "Pass true if the payments to be collected are to be subject to a gift aid\nclaim, false if not (pass false if the client is not a charity).\n",
            "required": true,
            "in": "query",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/initialAmount?"
          },
          {
            "name": "extraInitialAmounts",
            "description": "If there are extra charges to be collected with the first payment\n(e.g. a gym joining fee/registration fee) then these can be added\nseparately with this parameter. Do not pass the parameter if there\nare no extra amounts, and this must not be used if the contract is\nan ad-hoc payment contract.\n",
            "in": "query",
            "type": "number",
            "multipleOf": 0.01
          },
          {
            "$ref": "#/parameters/amount?"
          },
          {
            "$ref": "#/parameters/finalAmount?"
          },
          {
            "name": "paymentMonthInYear",
            "description": "If the contract is for regular payments then the month in which you\nwish the first payment should be passed with this parameter.\n\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\nThis field is only mandatory if the contract is **annual** or **monthly**.\n",
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "maximum": 12
          },
          {
            "$ref": "#/parameters/paymentDayInMonth?"
          },
          {
            "name": "paymentDayInWeek",
            "description": "1 -> Monday                                                                     \n2 -> Tuesday                                                                     \n3 -> Wednesday                                                                     \n4 -> Thursday                                                                     \n5 -> Friday\n\nIf the contract is for regular payments and has a weekly frequency, pass the\nday of the week that you wish payments to be collected via this parameter.\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\nThis field is only mandatory if the contract is **weekly**.\n",
            "in": "query",
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ]
          },
          {
            "$ref": "#/parameters/terminationType"
          },
          {
            "$ref": "#/parameters/atTheEnd"
          },
          {
            "name": "terminationDate",
            "description": "If the `terminationType` is `End on Exact Date` then the termination date\nshould be passed using this.\n\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/additionalReference?"
          },
          {
            "name": "customDirectDebitRef",
            "description": "**THIS PARAMETER SHOULD ONLY BE USED IF YOU HAVE BEEN INSTRUCTED TO DO SO** \n\nIf you have made arrangements with us to use a custom direct debit\nreferencing scheme, pass the custom direct debit using this parameter.\n\nThe field may only contain alphanumeric data (`a-z`, `A-Z`, `0-9`) and\ncertain special characters (hyphen `-` or solidus `/`).\n",
            "in": "query",
            "type": "string",
            "maxLength": 18
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "directDebitRef": {
                  "type": "string",
                  "description": "This is the Direct Debit Reference that will be quoted to the\ncustomer’s bank when collecting funds. Some banks will show this\nreference on the customer’s statement, although this is not\nguaranteed.\n"
                },
                "Id": {
                  "type": "string",
                  "description": "The GUID of the contract record. You must save this to your database\nas it will be needed should you wish to update the contract or create\nad-hoc payments using the payments or bulk payments call.\n"
                },
                "Message": {
                  "description": "This will be `null`.",
                  "enum": [
                    null
                  ]
                }
              }
            },
            "examples": {
              "application/json": {
                "DirectDebitRef": "LUISCT-MT000341",
                "Id": "e39940cc-9917-4b9e-8da4-5da4866862f1",
                "Message": null
              },
              "application/xml": "<ContractAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <DirectDebitRef>LUISCT-MT000340</DirectDebitRef>\n    <Id>f98c6339-6cdf-4ea6-8523-ea2bd17aedb7</Id>\n</ContractAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Contract Querying and Creation"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/amount": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to amend.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "patch": {
        "summary": "Changing the Amount",
        "description": "Amends an existing contract amount in the database.",
        "parameters": [
          {
            "name": "amount",
            "description": "The new amount to be taken.",
            "required": true,
            "in": "query",
            "type": "number",
            "multipleOf": 0.01
          },
          {
            "name": "comment",
            "description": "A comment to explain the reason for the change of amount.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Contract updated"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Contract updated</Message>\n</GeneralAcknowledgement>\n"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "ErrorCode": 3,
                "Detail": "Amount should be different than old contract amount",
                "Message": "Validation error"
              },
              "application/xml": "<ErrorAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Validation error</Message>\n    <ErrorCode>3</ErrorCode>\n    <Detail>Amount should be different than old contract\n    amount</Detail>\n</ErrorAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Contract Amendment"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/weekly": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to amend.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "patch": {
        "summary": "Changing the Day (Weekly Schedules)",
        "description": "Amends an existing contract payment date in the database.",
        "parameters": [
          {
            "name": "day",
            "description": "The new day on which payments are to be taken.\n\nPayments will be collected on the next available instance of the payment\nday, which will be a **minimum** of 5 working days in the future. Any\npayment already scheduled in the next 5 working days <u>will still be\ncollected</u>.\n",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ]
          },
          {
            "name": "comment",
            "description": "A comment to explain the reason for the change of day.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "$ref": "#/parameters/nextPaymentPatchAmount?"
          },
          {
            "$ref": "#/parameters/patchNextPayment"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Contract Amendment"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/monthly": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to amend.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "patch": {
        "summary": "Changing the Date (Monthly Schedules)",
        "description": "Amends an existing contract payment date in the database.",
        "parameters": [
          {
            "$ref": "#/parameters/monthDay"
          },
          {
            "name": "comment",
            "description": "A comment to explain the reason for the change of day.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "$ref": "#/parameters/nextPaymentPatchAmount?"
          },
          {
            "$ref": "#/parameters/patchNextPayment"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Contract Amendment"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/annual": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to amend.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "patch": {
        "summary": "Changing the Date (Annual Schedules)",
        "description": "Amends an existing contract payment date in the database.",
        "parameters": [
          {
            "$ref": "#/parameters/monthDay"
          },
          {
            "name": "month",
            "description": "The new month in the year on which the payments are to be taken.",
            "required": true,
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "maximum": 12
          },
          {
            "name": "comment",
            "description": "A comment to explain the reason for the change of day.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "$ref": "#/parameters/nextPaymentPatchAmount?"
          },
          {
            "$ref": "#/parameters/patchNextPayment"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Contract Amendment"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/reference": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to amend.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "patch": {
        "summary": "Changing the Direct Debit Reference (for authorised users only)",
        "description": "In general, our software will allocate a unique direct debit reference\nfor every contract created within the system. For own SUN and FM SUN\nclients that have made prior arrangements with us, it is possible to\nchange a reference number after the contract has been set up. Please\nnote that using this facility will incur extra charges as new\ninstructions will need to be sent to the bank via BACS.\n",
        "parameters": [
          {
            "name": "newDDRef",
            "description": "If you have made arrangements with us to use a custom direct debit \nreferencing scheme, pass the new custom direct debit using this parameter.\n\nThe field may only contain alphanumeric data (`a-z`, `A-Z`, `0-9`) and\ncertain special characters (hyphen `-` or solidus `/`).\n",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 18
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Contract reference updated"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Contract reference updated</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Contract Amendment"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to cancel the direct debit on.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "post": {
        "summary": "Changes the status of the Direct Debit to “Cancelled”.",
        "description": "Future payments will be created within our system, but automatically marked\nas unpaid.\n",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Contract cancelled"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Contract cancelled</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Cancelling the Direct Debit (Does not cancel payment creation)"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/archive": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to archive.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "post": {
        "summary": "Cancels the direct debit, writes off any outstanding arrears balance, cancels\nfuture payments and sets the contract status to “archived”.\n",
        "description": "**NOTE:** It <u>is not</u> possible to “unarchive” a contract once the archive\nprocess has been initiated.\n",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Archiving a Contract"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/reactivate": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to reactivate.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "post": {
        "summary": "Reactivates the Direct Debit if it is in the ***Cancelled*** state.",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Reactivating a Direct Debit"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/restart": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to restart.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "post": {
        "summary": "Reactivates the Direct Debit if it is in the ***Expired*** state and payments\nhave already come to an end.\n",
        "parameters": [
          {
            "$ref": "#/parameters/paymentDayInMonth?"
          },
          {
            "name": "paymentMonthInYear",
            "description": "If the contract is for regular payments then the month in which you\nwish the first payment should be passed with this parameter.\n\nThis field is only mandatory if the contract is **not** an ad-hoc contract.\nThis field is only mandatory if the contract is **annual** or **monthly**.\n",
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "maximum": 12
          },
          {
            "$ref": "#/parameters/terminationType"
          },
          {
            "$ref": "#/parameters/numberOfDebits?"
          },
          {
            "$ref": "#/parameters/initialAmount?"
          },
          {
            "$ref": "#/parameters/amount?"
          },
          {
            "$ref": "#/parameters/finalAmount?"
          },
          {
            "$ref": "#/parameters/atTheEnd"
          },
          {
            "$ref": "#/parameters/additionalReference?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Contract restarted"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Contract restarted</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Restart a Contract"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/payment": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID that you wish to query.",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "get": {
        "summary": "Queries the database and returns details of payments related to the\nspecified contract.\n",
        "parameters": [
          {
            "name": "rows",
            "description": "The number of payments (rows) you wish to be returned in the response.\n",
            "required": true,
            "in": "query",
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Payments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Payment"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "Payments": [
                  {
                    "Id": "36bb4f4f-9a7f-4ead-82dc-9295c6fb9e8b",
                    "Status": "Pending",
                    "IsCredit": false,
                    "IsAdhoc": true,
                    "Amount": 15.99,
                    "Date": "2017-05-15T00:00:00",
                    "ReasonCode": 0,
                    "ReasonMessage": null,
                    "Comment": "This is a test",
                    "Type": "BACS"
                  }
                ]
              },
              "application/xml": "<PaymentsResponse xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Payments>\n        <PaymentDetail>\n            <Id>36bb4f4f-9a7f-4ead-82dc-9295c6fb9e8b</Id>\n            <Status>Pending</Status>\n            <IsCredit>false</IsCredit>\n            <IsAdhoc>true</IsAdhoc>\n            <Amount>15.99</Amount>\n            <Date>2017-05-15T00:00:00</Date>\n            <ReasonCode>0</ReasonCode>\n            <Comment>This is a test</Comment>\n            <Type>BACS</Type>\n        </PaymentDetail>\n    </Payments>\n</PaymentsResponse>\n"
            }
          }
        },
        "tags": [
          "Adding/Querying Payments"
        ]
      },
      "post": {
        "summary": "Adds a payment to the database to the contract specified in the URL.",
        "parameters": [
          {
            "name": "amount",
            "description": "The amount to be collected.",
            "in": "query",
            "type": "number",
            "multipleOf": 0.01
          },
          {
            "name": "date",
            "description": "The date on which the payment should be collected.\n\nThis **must** be at least 5 **working** days in the future, on a permitted\ndate and not before the start date set when creating the contract.\n\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "in": "query",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "comment",
            "description": "A comment relating to the payment (which can be recalled using the GET\nmethod).\n",
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "isCredit",
            "description": "If you have an own SUN and you have agreed by prior arrangement with your\naccount manager that you may issue credits, pass `true` with this parameter\nto issue a credit to the customer.\n",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Contract": {
                  "description": "The GUID of the contract to which the payment has been applied.\n",
                  "type": "string",
                  "format": "guid"
                },
                "Amount": {
                  "description": "The amount of the payment.",
                  "type": "number",
                  "multipleOf": 0.01
                },
                "DueDate": {
                  "description": "The due date (date of collection) of the payment.",
                  "type": "string",
                  "format": "date-time"
                },
                "Id": {
                  "description": "The GUID of the payment. We suggest that you save this so that you\ncan easily change or query the payment in future. If you are using\npushed return data, this will be included in any payload delivered\nconcerning the payment.\n",
                  "type": "string",
                  "format": "guid"
                },
                "Error": {
                  "description": "If any error occurs, a message will appear here.",
                  "type": "string"
                },
                "Message": {
                  "description": "If any additional message from the system is generated, it will\nappear here (usually null).\n",
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "Contract": "b3c17b6f-9ad2-4fa3-9a33-8a8f6813ab1f",
                "Amount": 15.99,
                "DueDate": "2017-05-15T00:00:00",
                "Id": "1b2ac277-5f1f-424a-b55f-323d5bcef8f6",
                "Error": null,
                "Message": null
              },
              "application/xml": "<PaymentAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Contract>b3c17b6f-9ad2-4fa3-9a33-8a8f6813ab1f</Contract>\n    <Amount>15.99</Amount>\n    <DueDate>2017-05-15T00:00:00</DueDate>\n    <Id>36bb4f4f-9a7f-4ead-82dc-9295c6fb9e8b</Id>\n</PaymentAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Adding/Querying Payments"
        ]
      }
    },
    "/client/{clientCode}/bulk/payments": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        }
      ],
      "post": {
        "summary": "Adds a payment to the database to the contract specified in the URL.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "body",
            "description": "Payments should be submitted in the body of the POST request in the format\ndetailed below.\n",
            "required": true,
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Payments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "amount",
                      "date",
                      "contract"
                    ],
                    "properties": {
                      "contract": {
                        "description": "The contract GUID that you wish to collect a payment against.",
                        "type": "string",
                        "format": "guid"
                      },
                      "amount": {
                        "description": "The amount to be collected.",
                        "type": "number",
                        "multipleOf": 0.01
                      },
                      "date": {
                        "description": "The date on which the payment should be collected.\n\nThis **must** be at least 5 **working** days in the future,\non a permitted date and not before the start date set when\ncreating the contract.\n\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
                        "type": "string",
                        "format": "date-time"
                      },
                      "comment": {
                        "description": "A comment relating to the payment (which can be recalled using\nthe GET method).\n",
                        "type": "string",
                        "maxLength": 255
                      },
                      "isCredit": {
                        "description": "If you have an own SUN and you have agreed by prior arrangement\nwith your account manager that you may issue credits, pass\n`true` with this parameter to issue a credit to the customer.\n\nIf omitted, this will be a debit.\n",
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "example": {
                "Payments": [
                  {
                    "contract": "GUID",
                    "amount": 1.1,
                    "date": "YYYY-MM-DDT00:00:00.000",
                    "comment": "Up to 256 characters, optional",
                    "isCredit": false
                  },
                  {
                    "contract": "GUID",
                    "amount": 1.1,
                    "date": "YYYY-MM-DDT00:00:00.000",
                    "comment": "Up to 256 characters, optional",
                    "isCredit": false
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Failures": [],
                "FailureCount": 0,
                "IsSuccessfull": true,
                "Message": "All payments are in queue for process"
              }
            }
          }
        },
        "tags": [
          "Bulk Adding Payments"
        ]
      }
    },
    "/client/{clientCode}/contract/{contractId}/payment/{paymentId}": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "name": "contractId",
          "description": "The contract GUID on which the payment you are amending has been lodged.\n",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        },
        {
          "name": "paymentId",
          "description": "The payment GUID of the payment you wish to amend.\n",
          "required": true,
          "in": "path",
          "type": "string",
          "format": "guid"
        }
      ],
      "get": {
        "summary": "Queries the database for details of an existing payment.",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Id": "36bb4f4f-9a7f-4ead-82dc-9295c6fb9e8b",
                "Status": "Pending",
                "IsCredit": false,
                "IsAdhoc": true,
                "Amount": 15.99,
                "Date": "2017-05-15T00:00:00",
                "ReasonCode": "0,",
                "ReasonMessage": null,
                "Comment": "This is a test",
                "Type": "BACS"
              },
              "application/xml": "<PaymentDetail xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Id>36bb4f4f-9a7f-4ead-82dc-9295c6fb9e8b</Id>\n    <Status>Pending</Status>\n    <IsCredit>false</IsCredit>\n    <IsAdhoc>true</IsAdhoc>\n    <Amount>15.99</Amount>\n    <Date>2017-05-15T00:00:00</Date>\n    <ReasonCode>0</ReasonCode>\n    <Comment>This is a test</Comment>\n    <Type>BACS</Type>\n</PaymentDetail>\n"
            }
          }
        },
        "tags": [
          "Payment Manipulation"
        ]
      },
      "patch": {
        "summary": "Amends an existing payment in the database.",
        "parameters": [
          {
            "name": "comment",
            "description": "A comment that can be returned when querying the payment.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "amount",
            "description": "The amount you wish to change the payment to.",
            "required": true,
            "in": "query",
            "type": "number",
            "multipleOf": 0.01
          },
          {
            "name": "date",
            "description": "The date on which you require the payment to be taken.\n\n**Format: `YYYY-MM-DDT00:00:00.000`**\n",
            "required": true,
            "in": "query",
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Payment"
            },
            "examples": {
              "application/json": {
                "Message": "Payment updated"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Payment updated</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Payment Manipulation"
        ]
      },
      "delete": {
        "summary": "Deletes an existing payment from the database (providing it has not yet been submitted to BACS).",
        "parameters": [
          {
            "name": "comment",
            "description": "A comment that can be returned when querying the payment.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Payment deleted"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Message>Payment deleted</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Payment Manipulation"
        ]
      }
    },
    "/client/{clientCode}/schedules": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        }
      ],
      "get": {
        "summary": "Queries the database for details of existing schedules.",
        "description": "The response is split into two parts as follows:\n1. Services\n    Services give some general set-up detail for the underlying payment\n    schedules:\n    - Title\n    - RefProtocol\n    - RefPrefix\n    - RefFrom\n    - RefTo\n\n2. Schedules sit underneath Services and these are allocated to the customer\n    in order to collect payments. The parameters returned are as\n    follows:\n    - ScheduleId\n    - Name\n    - Deacription\n    - AllowDifferentFirstPayment\n    - AllowDifferentLastPayment\n    - AllowFreeMonthDaySelection\n    - AllowFreeMonthSelection\n    - AllowFreeWeekDaySelection\n    - Amount\n    - AtTheEnd\n    - DayOfWeek\n    - DaysOfMonth\n    - Every\n    - ExpectedNumberOfPayments\n    - ExtraInitialPayments\n    - FinalAmount\n    - Frequency\n    - InitialAmount\n    - IsExpiryDateReached\n    - IsNotScheduled\n    - IsSuspended\n    - MonthOfYear\n    - RegistrationCharge\n    - Start\n    - StartType\n    - TerminationDate\n    - TerminationType\n",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Services": [
                  {
                    "Title": "Annual Membership",
                    "RefProtocol": "Auto-number",
                    "RefPrefix": "AN",
                    "RefFrom": null,
                    "RefTo": "null,",
                    "Schedules": [
                      {
                        "ScheduleId": "7663e3a0-514c-4ec7-808e-05d27a85fa98",
                        "Name": "AN Dates 15/24 - Rolling",
                        "Description": "Annually > Every 1 year > 15th, 24th of any month\ncustomer's choice) > First , then on a regular basis\n",
                        "AllowDifferentFirstPayment": true,
                        "AllowDifferentLastPayment": false,
                        "AllowFreeMonthDaySelection": false,
                        "AllowFreeMonthSelection": true,
                        "AllowFreeWeekDaySelection": true,
                        "Amount": null,
                        "AtTheEnd": "Switch to further notice",
                        "DayOfWeek": "Free",
                        "DaysOfMonth": "15,24",
                        "Every": 1,
                        "ExpectedNumberOfPayments": null,
                        "ExtraInitialPayments": "",
                        "FinalAmount": null,
                        "Frequency": "Annually",
                        "InitialAmount": null,
                        "IsExpiryDateReached": false,
                        "IsNotScheduled": false,
                        "IsSuspended": false,
                        "MonthOfYear": "Free",
                        "RegistrationCharge": 0,
                        "Start": null,
                        "StartType": "As soon as possible",
                        "TerminationDate": null,
                        "TerminationType": "Until further notice"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Obtaining Available Schedules"
        ]
      }
    },
    "/eazyentry/client/{clientCode}": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        }
      ],
      "get": {
        "summary": "Search Customer by Card Number",
        "description": "Queries the database for details of customers that match the card number quoted.\n",
        "parameters": [
          {
            "name": "cardNumber",
            "description": "The customer’s membership card number.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "examples": {
              "application/json": {
                "CustomerId": "6c42c07e-93a0-4c8c-a0ae-450b597fbbca",
                "Name": "Steven Smith",
                "PostCode": "BX11 1AX",
                "Products": [
                  {
                    "Title": "No Frequency - AD-HOC Payments",
                    "EndDate": "Infinite",
                    "ContractStatus": "Active"
                  }
                ],
                "RejectionReason": "",
                "LastVisit": "First time",
                "Picture": "/s3?Customer.Picture/6c42c07e-93a0-4c8c-a0ae-450b597fbbca.PNG?Capture.PNG",
                "Allow": false,
                "CardNumber": "?123456789;"
              },
              "application/xml": "<EzEntryDetail xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <CustomerId>6c42c07e-93a0-4c8c-a0ae-450b597fbbca</CustomerId>\n    <Name>Steven Smith</Name>\n    <PostCode>BT41 2AX</PostCode>\n    <Products>\n        <EzEntryProduct>\n            <Title>No Frequency - AD-HOC Payments</Title>\n            <EndDate>Infinite</EndDate>\n            <ContractStatus>Active</ContractStatus>\n        </EzEntryProduct><EzEntryProduct>\n    </Products>\n    <RejectionReason />\n    <LastVisit>First time</LastVisit>\n    <Picture>/s3?Customer.Picture/6c42c07e-93a0-4c8c-a0ae-450b597fbbca.PNG?Capture.PNG</Picture>\n    <Allow>false</Allow>\n    <CardNumber>?123456789;</CardNumber>\n</EzEntryDetail>\n"
            }
          }
        },
        "tags": [
          "Door Entry"
        ]
      }
    },
    "/eazyentry/client/{clientCode}/surname_postcode": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        }
      ],
      "get": {
        "summary": "Search Customer by Surname and Postcode",
        "description": "Queries the database for details of customers that match the surname and\npostcode quoted.\n",
        "parameters": [
          {
            "name": "surname",
            "description": "The customer’s surname.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "postCode",
            "description": "The customer’s post code.",
            "required": true,
            "in": "query",
            "type": "string",
            "maxLength": 255
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "Found": {
                  "description": "The number of matching records found by the system.",
                  "type": "integer"
                },
                "Customers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Customer"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "Found": 1,
                "Customers": [
                  {
                    "CustomerId": "6c42c07e-93a0-4c8c-a0ae-450b597fbbca",
                    "Name": "Steven Smith",
                    "PostCode": "BT41 2AX",
                    "Products": [
                      {
                        "Title": "No Frequency - AD-HOC Payments",
                        "EndDate": "Infinite",
                        "ContractStatus": "Active"
                      }
                    ],
                    "RejectionReason": "",
                    "LastVisit": "First time",
                    "Picture": "/s3?Customer.Picture/6c42c07e-93a0-4c8c-a0ae-450b597fbbca.PNG?Capture.PNG",
                    "Allow": false,
                    "CardNumber": "?123456789;"
                  }
                ]
              },
              "application/xml": "<EzEntriesResponse xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Found>1</Found>\n    <Customers>\n        <EzEntryDetail>\n            <CustomerId>6c42c07e-93a0-4c8c-a0ae-450b597fbbca</CustomerId>\n            <Name>Steven Smith</Name>\n            <PostCode>BT41 2AX</PostCode>\n            <Products>\n                <EzEntryProduct>\n                    <Title>No Frequency - AD-HOC Payments</Title>\n                    <EndDate>Infinite</EndDate>\n                    <ContractStatus>Active</ContractStatus>\n                </EzEntryProduct>\n            </Products>\n            <RejectionReason />\n            <LastVisit>First time</LastVisit>\n            <Picture>/s3?Customer.Picture/6c42c07e-93a0-4c8c-a0ae-450b597fbbca.PNG?Capture.PNG</Picture>\n            <Allow>false</Allow>\n            <CardNumber>?123456789;</CardNumber>\n        </EzEntryDetail>\n    </Customers>\n</EzEntriesResponse>\n"
            }
          }
        },
        "tags": [
          "Door Entry"
        ]
      }
    },
    "/eazyentry/client/{clientCode}/customer/{customerId}": {
      "parameters": [
        {
          "$ref": "#/parameters/clientCode"
        },
        {
          "$ref": "#/parameters/customerId"
        }
      ],
      "post": {
        "summary": "Register a Visit",
        "description": "Records a visit against the customer in the database.",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "Message": "Visit recorded"
              },
              "application/xml": "<GeneralAcknowledgement xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <Message>Visit recorded</Message>\n</GeneralAcknowledgement>\n"
            }
          }
        },
        "tags": [
          "Door Entry"
        ]
      }
    }
  }
}
